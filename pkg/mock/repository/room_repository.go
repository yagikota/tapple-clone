// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/domain/repository/room_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/CyberAgentHack/2208-ace-go-server/pkg/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIRoomRepository is a mock of IRoomRepository interface.
type MockIRoomRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIRoomRepositoryMockRecorder
}

// MockIRoomRepositoryMockRecorder is the mock recorder for MockIRoomRepository.
type MockIRoomRepositoryMockRecorder struct {
	mock *MockIRoomRepository
}

// NewMockIRoomRepository creates a new mock instance.
func NewMockIRoomRepository(ctrl *gomock.Controller) *MockIRoomRepository {
	mock := &MockIRoomRepository{ctrl: ctrl}
	mock.recorder = &MockIRoomRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIRoomRepository) EXPECT() *MockIRoomRepositoryMockRecorder {
	return m.recorder
}

// FindAllRooms mocks base method.
func (m *MockIRoomRepository) FindAllRooms(ctx context.Context, userID int) (model.RoomSlice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllRooms", ctx, userID)
	ret0, _ := ret[0].(model.RoomSlice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllRooms indicates an expected call of FindAllRooms.
func (mr *MockIRoomRepositoryMockRecorder) FindAllRooms(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllRooms", reflect.TypeOf((*MockIRoomRepository)(nil).FindAllRooms), ctx, userID)
}

// FindRoomDetailByRoomID mocks base method.
func (m *MockIRoomRepository) FindRoomDetailByRoomID(ctx context.Context, userID, roomID, messageID int) (*model.Room, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRoomDetailByRoomID", ctx, userID, roomID, messageID)
	ret0, _ := ret[0].(*model.Room)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRoomDetailByRoomID indicates an expected call of FindRoomDetailByRoomID.
func (mr *MockIRoomRepositoryMockRecorder) FindRoomDetailByRoomID(ctx, userID, roomID, messageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRoomDetailByRoomID", reflect.TypeOf((*MockIRoomRepository)(nil).FindRoomDetailByRoomID), ctx, userID, roomID, messageID)
}

// SendMessage mocks base method.
func (m_2 *MockIRoomRepository) SendMessage(ctx context.Context, m *model.Message) (*model.Message, error) {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMessage", ctx, m)
	ret0, _ := ret[0].(*model.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockIRoomRepositoryMockRecorder) SendMessage(ctx, m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockIRoomRepository)(nil).SendMessage), ctx, m)
}
