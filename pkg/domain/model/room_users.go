// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RoomUser is an object representing the database table.
type RoomUser struct { // ルームユーザーID
	ID int `boil:"id" json:"id" toml:"id" yaml:"id"`
	// ユーザーID
	UserID int `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	// ルームID
	RoomID int `boil:"room_id" json:"room_id" toml:"room_id" yaml:"room_id"`
	// ピン留め(0: されていない, 1: されている)
	IsPinned bool `boil:"is_pinned" json:"is_pinned" toml:"is_pinned" yaml:"is_pinned"`
	// ルームユーザー作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// ルームユーザー作成日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// ルームユーザー論理削除日時
	DeteledAt null.Time `boil:"deteled_at" json:"deteled_at,omitempty" toml:"deteled_at" yaml:"deteled_at,omitempty"`

	R *roomUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roomUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoomUserColumns = struct {
	ID        string
	UserID    string
	RoomID    string
	IsPinned  string
	CreatedAt string
	UpdatedAt string
	DeteledAt string
}{
	ID:        "id",
	UserID:    "user_id",
	RoomID:    "room_id",
	IsPinned:  "is_pinned",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeteledAt: "deteled_at",
}

var RoomUserTableColumns = struct {
	ID        string
	UserID    string
	RoomID    string
	IsPinned  string
	CreatedAt string
	UpdatedAt string
	DeteledAt string
}{
	ID:        "room_users.id",
	UserID:    "room_users.user_id",
	RoomID:    "room_users.room_id",
	IsPinned:  "room_users.is_pinned",
	CreatedAt: "room_users.created_at",
	UpdatedAt: "room_users.updated_at",
	DeteledAt: "room_users.deteled_at",
}

// Generated where

var RoomUserWhere = struct {
	ID        whereHelperint
	UserID    whereHelperint
	RoomID    whereHelperint
	IsPinned  whereHelperbool
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeteledAt whereHelpernull_Time
}{
	ID:        whereHelperint{field: "`room_users`.`id`"},
	UserID:    whereHelperint{field: "`room_users`.`user_id`"},
	RoomID:    whereHelperint{field: "`room_users`.`room_id`"},
	IsPinned:  whereHelperbool{field: "`room_users`.`is_pinned`"},
	CreatedAt: whereHelpertime_Time{field: "`room_users`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`room_users`.`updated_at`"},
	DeteledAt: whereHelpernull_Time{field: "`room_users`.`deteled_at`"},
}

// RoomUserRels is where relationship names are stored.
var RoomUserRels = struct {
	User string
	Room string
}{
	User: "User",
	Room: "Room",
}

// roomUserR is where relationships are stored.
type roomUserR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
	Room *Room `boil:"Room" json:"Room" toml:"Room" yaml:"Room"`
}

// NewStruct creates a new relationship struct
func (*roomUserR) NewStruct() *roomUserR {
	return &roomUserR{}
}

func (r *roomUserR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *roomUserR) GetRoom() *Room {
	if r == nil {
		return nil
	}
	return r.Room
}

// roomUserL is where Load methods for each relationship are stored.
type roomUserL struct{}

var (
	roomUserAllColumns            = []string{"id", "user_id", "room_id", "is_pinned", "created_at", "updated_at", "deteled_at"}
	roomUserColumnsWithoutDefault = []string{"user_id", "room_id", "deteled_at"}
	roomUserColumnsWithDefault    = []string{"id", "is_pinned", "created_at", "updated_at"}
	roomUserPrimaryKeyColumns     = []string{"id"}
	roomUserGeneratedColumns      = []string{}
)

type (
	// RoomUserSlice is an alias for a slice of pointers to RoomUser.
	// This should almost always be used instead of []RoomUser.
	RoomUserSlice []*RoomUser
	// RoomUserHook is the signature for custom RoomUser hook methods
	RoomUserHook func(context.Context, boil.ContextExecutor, *RoomUser) error

	roomUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roomUserType                 = reflect.TypeOf(&RoomUser{})
	roomUserMapping              = queries.MakeStructMapping(roomUserType)
	roomUserPrimaryKeyMapping, _ = queries.BindMapping(roomUserType, roomUserMapping, roomUserPrimaryKeyColumns)
	roomUserInsertCacheMut       sync.RWMutex
	roomUserInsertCache          = make(map[string]insertCache)
	roomUserUpdateCacheMut       sync.RWMutex
	roomUserUpdateCache          = make(map[string]updateCache)
	roomUserUpsertCacheMut       sync.RWMutex
	roomUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roomUserAfterSelectHooks []RoomUserHook

var roomUserBeforeInsertHooks []RoomUserHook
var roomUserAfterInsertHooks []RoomUserHook

var roomUserBeforeUpdateHooks []RoomUserHook
var roomUserAfterUpdateHooks []RoomUserHook

var roomUserBeforeDeleteHooks []RoomUserHook
var roomUserAfterDeleteHooks []RoomUserHook

var roomUserBeforeUpsertHooks []RoomUserHook
var roomUserAfterUpsertHooks []RoomUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoomUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoomUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoomUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoomUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoomUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoomUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoomUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoomUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoomUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoomUserHook registers your hook function for all future operations.
func AddRoomUserHook(hookPoint boil.HookPoint, roomUserHook RoomUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		roomUserAfterSelectHooks = append(roomUserAfterSelectHooks, roomUserHook)
	case boil.BeforeInsertHook:
		roomUserBeforeInsertHooks = append(roomUserBeforeInsertHooks, roomUserHook)
	case boil.AfterInsertHook:
		roomUserAfterInsertHooks = append(roomUserAfterInsertHooks, roomUserHook)
	case boil.BeforeUpdateHook:
		roomUserBeforeUpdateHooks = append(roomUserBeforeUpdateHooks, roomUserHook)
	case boil.AfterUpdateHook:
		roomUserAfterUpdateHooks = append(roomUserAfterUpdateHooks, roomUserHook)
	case boil.BeforeDeleteHook:
		roomUserBeforeDeleteHooks = append(roomUserBeforeDeleteHooks, roomUserHook)
	case boil.AfterDeleteHook:
		roomUserAfterDeleteHooks = append(roomUserAfterDeleteHooks, roomUserHook)
	case boil.BeforeUpsertHook:
		roomUserBeforeUpsertHooks = append(roomUserBeforeUpsertHooks, roomUserHook)
	case boil.AfterUpsertHook:
		roomUserAfterUpsertHooks = append(roomUserAfterUpsertHooks, roomUserHook)
	}
}

// OneG returns a single roomUser record from the query using the global executor.
func (q roomUserQuery) OneG(ctx context.Context) (*RoomUser, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single roomUser record from the query.
func (q roomUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoomUser, error) {
	o := &RoomUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: failed to execute a one query for room_users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all RoomUser records from the query using the global executor.
func (q roomUserQuery) AllG(ctx context.Context) (RoomUserSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RoomUser records from the query.
func (q roomUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoomUserSlice, error) {
	var o []*RoomUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "model: failed to assign all query results to RoomUser slice")
	}

	if len(roomUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all RoomUser records in the query using the global executor
func (q roomUserQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RoomUser records in the query.
func (q roomUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to count room_users rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q roomUserQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q roomUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "model: failed to check if room_users exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *RoomUser) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Room pointed to by the foreign key.
func (o *RoomUser) Room(mods ...qm.QueryMod) roomQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.RoomID),
	}

	queryMods = append(queryMods, mods...)

	return Rooms(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roomUserL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoomUser interface{}, mods queries.Applicator) error {
	var slice []*RoomUser
	var object *RoomUser

	if singular {
		var ok bool
		object, ok = maybeRoomUser.(*RoomUser)
		if !ok {
			object = new(RoomUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoomUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoomUser))
			}
		}
	} else {
		s, ok := maybeRoomUser.(*[]*RoomUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoomUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoomUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roomUserR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomUserR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(roomUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.RoomUsers = append(foreign.R.RoomUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.RoomUsers = append(foreign.R.RoomUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadRoom allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roomUserL) LoadRoom(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoomUser interface{}, mods queries.Applicator) error {
	var slice []*RoomUser
	var object *RoomUser

	if singular {
		var ok bool
		object, ok = maybeRoomUser.(*RoomUser)
		if !ok {
			object = new(RoomUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoomUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoomUser))
			}
		}
	} else {
		s, ok := maybeRoomUser.(*[]*RoomUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoomUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoomUser))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &roomUserR{}
		}
		args = append(args, object.RoomID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomUserR{}
			}

			for _, a := range args {
				if a == obj.RoomID {
					continue Outer
				}
			}

			args = append(args, obj.RoomID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`rooms`),
		qm.WhereIn(`rooms.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Room")
	}

	var resultSlice []*Room
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Room")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for rooms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rooms")
	}

	if len(roomUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Room = foreign
		if foreign.R == nil {
			foreign.R = &roomR{}
		}
		foreign.R.RoomUsers = append(foreign.R.RoomUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoomID == foreign.ID {
				local.R.Room = foreign
				if foreign.R == nil {
					foreign.R = &roomR{}
				}
				foreign.R.RoomUsers = append(foreign.R.RoomUsers, local)
				break
			}
		}
	}

	return nil
}

// SetUserG of the roomUser to the related item.
// Sets o.R.User to related.
// Adds o to related.R.RoomUsers.
// Uses the global database handle.
func (o *RoomUser) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the roomUser to the related item.
// Sets o.R.User to related.
// Adds o to related.R.RoomUsers.
func (o *RoomUser) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `room_users` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, roomUserPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &roomUserR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			RoomUsers: RoomUserSlice{o},
		}
	} else {
		related.R.RoomUsers = append(related.R.RoomUsers, o)
	}

	return nil
}

// SetRoomG of the roomUser to the related item.
// Sets o.R.Room to related.
// Adds o to related.R.RoomUsers.
// Uses the global database handle.
func (o *RoomUser) SetRoomG(ctx context.Context, insert bool, related *Room) error {
	return o.SetRoom(ctx, boil.GetContextDB(), insert, related)
}

// SetRoom of the roomUser to the related item.
// Sets o.R.Room to related.
// Adds o to related.R.RoomUsers.
func (o *RoomUser) SetRoom(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Room) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `room_users` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"room_id"}),
		strmangle.WhereClause("`", "`", 0, roomUserPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoomID = related.ID
	if o.R == nil {
		o.R = &roomUserR{
			Room: related,
		}
	} else {
		o.R.Room = related
	}

	if related.R == nil {
		related.R = &roomR{
			RoomUsers: RoomUserSlice{o},
		}
	} else {
		related.R.RoomUsers = append(related.R.RoomUsers, o)
	}

	return nil
}

// RoomUsers retrieves all the records using an executor.
func RoomUsers(mods ...qm.QueryMod) roomUserQuery {
	mods = append(mods, qm.From("`room_users`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`room_users`.*"})
	}

	return roomUserQuery{q}
}

// FindRoomUserG retrieves a single record by ID.
func FindRoomUserG(ctx context.Context, iD int, selectCols ...string) (*RoomUser, error) {
	return FindRoomUser(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRoomUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoomUser(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*RoomUser, error) {
	roomUserObj := &RoomUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `room_users` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, roomUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "model: unable to select from room_users")
	}

	if err = roomUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return roomUserObj, err
	}

	return roomUserObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RoomUser) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoomUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("model: no room_users provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roomUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roomUserInsertCacheMut.RLock()
	cache, cached := roomUserInsertCache[key]
	roomUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roomUserAllColumns,
			roomUserColumnsWithDefault,
			roomUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roomUserType, roomUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roomUserType, roomUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `room_users` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `room_users` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `room_users` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, roomUserPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to insert into room_users")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == roomUserMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for room_users")
	}

CacheNoHooks:
	if !cached {
		roomUserInsertCacheMut.Lock()
		roomUserInsertCache[key] = cache
		roomUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single RoomUser record using the global executor.
// See Update for more documentation.
func (o *RoomUser) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RoomUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoomUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roomUserUpdateCacheMut.RLock()
	cache, cached := roomUserUpdateCache[key]
	roomUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roomUserAllColumns,
			roomUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("model: unable to update room_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `room_users` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, roomUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roomUserType, roomUserMapping, append(wl, roomUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update room_users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by update for room_users")
	}

	if !cached {
		roomUserUpdateCacheMut.Lock()
		roomUserUpdateCache[key] = cache
		roomUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q roomUserQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q roomUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all for room_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected for room_users")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RoomUserSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoomUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("model: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `room_users` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roomUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to update all in roomUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to retrieve rows affected all in update all roomUser")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RoomUser) UpsertG(ctx context.Context, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateColumns, insertColumns)
}

var mySQLRoomUserUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoomUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("model: no room_users provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roomUserColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLRoomUserUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roomUserUpsertCacheMut.RLock()
	cache, cached := roomUserUpsertCache[key]
	roomUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			roomUserAllColumns,
			roomUserColumnsWithDefault,
			roomUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			roomUserAllColumns,
			roomUserPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("model: unable to upsert room_users, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`room_users`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `room_users` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(roomUserType, roomUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roomUserType, roomUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "model: unable to upsert for room_users")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == roomUserMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(roomUserType, roomUserMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "model: unable to retrieve unique values for room_users")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "model: unable to populate default values for room_users")
	}

CacheNoHooks:
	if !cached {
		roomUserUpsertCacheMut.Lock()
		roomUserUpsertCache[key] = cache
		roomUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single RoomUser record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RoomUser) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RoomUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoomUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("model: no RoomUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roomUserPrimaryKeyMapping)
	sql := "DELETE FROM `room_users` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete from room_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by delete for room_users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q roomUserQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q roomUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("model: no roomUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from room_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for room_users")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RoomUserSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoomUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(roomUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `room_users` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roomUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "model: unable to delete all from roomUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "model: failed to get rows affected by deleteall for room_users")
	}

	if len(roomUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RoomUser) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("model: no RoomUser provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoomUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoomUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoomUserSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("model: empty RoomUserSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoomUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoomUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `room_users`.* FROM `room_users` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roomUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "model: unable to reload all in RoomUserSlice")
	}

	*o = slice

	return nil
}

// RoomUserExistsG checks if the RoomUser row exists.
func RoomUserExistsG(ctx context.Context, iD int) (bool, error) {
	return RoomUserExists(ctx, boil.GetContextDB(), iD)
}

// RoomUserExists checks if the RoomUser row exists.
func RoomUserExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `room_users` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "model: unable to check if room_users exists")
	}

	return exists, nil
}
